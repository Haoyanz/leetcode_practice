/*
Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
*/

class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int i : nums){
            Integer count = map.get(i);
            if(count == null){
                map.put(i, 1);
            } else {
                map.put(i, count + 1);
            }
        }
        PriorityQueue<Map.Entry<Integer, Integer>> minHeap = new PriorityQueue<>(new Comparator<Map.Entry<Integer, Integer>> () {
            @Override
            public int compare(Map.Entry<Integer, Integer> e1, Map.Entry<Integer, Integer> e2){
                return e1.getValue().compareTo(e2.getValue());
            }
        });
        for(Map.Entry entry : map.entrySet()){
            if(minHeap.size() < k){
                minHeap.offer(entry);
            } else if (minHeap.peek().getValue() < (int)entry.getValue()){
                minHeap.poll();
                minHeap.offer(entry);
            }
        }
        List<Integer> result = new ArrayList<>();
        for(int i = 0; i < k; i++){
            result.add(minHeap.poll().getKey());
        }
        return result;
    }
}
