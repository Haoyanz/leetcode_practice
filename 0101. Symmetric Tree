/*
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
 

But the following [1,2,2,null,3,null,3] is not:

    1
   / \
  2   2
   \   \
   3    3
*/

//recursive
class Solution {
    public boolean isSymmetric(TreeNode root) {
        return isSymmetric(root, root);
    }
    public boolean isSymmetric(TreeNode one, TreeNode two){
        if(one == null && two == null){
            return true;
        } else if (one == null || two == null) {
            return false;
        } else if (one.val != two.val){
            return false;
        } else {
            return isSymmetric(one.left, two.right) && isSymmetric(one.right, two.left);
        }
    }
}
