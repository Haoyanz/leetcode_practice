/*
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4
*/

class LRUCache {
    class DListNode {
        int key;
        int value;
        DListNode next;
        DListNode prev;
        public DListNode(){
            
        }
        public DListNode(int key, int value){
            this.key = key;
            this.value = value;
        }
    }
    DListNode head;
    DListNode tail;
    Map<Integer, DListNode> map;
    int capacity;
    int size;
    public LRUCache(int capacity) {
        map = new HashMap<>();
        this.capacity = capacity;
        this.size = 0;
        head = new DListNode();
        tail = new DListNode();
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        DListNode node = map.get(key);
        if(node == null){
            return -1;
        }
        moveToHead(node);
        return node.value;
    }
    
    public void put(int key, int value) {
        DListNode node = map.get(key);
        if(node == null){
            DListNode newNode = new DListNode(key, value);
            map.put(key, newNode);
            addNode(newNode);
            size++;
            if(size > capacity){
                DListNode tail = deleteTail();
                map.remove(tail.key);
                size--;
            }
        } else {
            node.value = value;
            moveToHead(node);
        }
    }
    
    private void moveToHead(DListNode node){
        deleteNode(node);
        addNode(node);
    }
    
    private void addNode(DListNode node){
        node.prev = head;
        node.next = head.next;
        head.next.prev = node;
        head.next = node;
    }
    
    private void deleteNode(DListNode node){
        DListNode prev = node.prev;
        DListNode next = node.next;

        prev.next = next;
        next.prev = prev;
        // node.prev.next = node.next;
        // node.next.prev = node.prev;
        // node.next = null;
        // node.prev = null;
    }
    
    private DListNode deleteTail(){
        DListNode toRemove = tail.prev;
        deleteNode(toRemove);
        return toRemove;
    }
}
