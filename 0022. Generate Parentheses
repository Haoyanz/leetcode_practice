/*
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
*/

class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<>();
        helper(list, 0, 0, n, new char[2 * n]);
        return list;
    }
    public void helper(List<String> list, int left, int right, int n, char[] cur){
        if(right == n){
            list.add(new String(cur));
            return;
        }
        if(left < n){
            cur[left + right] = '(';
            helper(list, left + 1, right, n, cur);
        }
        if(right < left){
            cur[left + right] = ')';
            helper(list, left, right + 1, n, cur);
        }
    }
}
