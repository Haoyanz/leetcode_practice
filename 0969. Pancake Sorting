/*
Given an array A, we can perform a pancake flip: We choose some positive integer k <= A.length, then reverse the order of the first k elements of A.  We want to perform zero or more pancake flips (doing them one after another in succession) to sort the array A.

Return the k-values corresponding to a sequence of pancake flips that sort A.  Any valid answer that sorts the array within 10 * A.length flips will be judged as correct.

Input: [3,2,4,1]
Output: [4,2,4,3]
Explanation: 
We perform 4 pancake flips, with k values 4, 2, 4, and 3.
Starting state: A = [3, 2, 4, 1]
After 1st flip (k=4): A = [1, 4, 2, 3]
After 2nd flip (k=2): A = [4, 1, 2, 3]
After 3rd flip (k=4): A = [3, 2, 1, 4]
After 4th flip (k=3): A = [1, 2, 3, 4], which is sorted. 
*/

class Solution {
    public List<Integer> pancakeSort(int[] A) {
        List<Integer> list = new ArrayList<>();
        for(int i = A.length; i >= 1; i--){
            int position = findPos(A, i);
            if(position == i - 1){
                continue;
            } else if(position != 0){
                flip(A, position);
                list.add(position + 1);
            }
            flip(A, i - 1);
            list.add(i);
        }
        return list;
    }
    public int findPos(int[] A, int n){
        for(int i = 0; i < A.length; i++){
            if(A[i] == n){
                return i;
            }
        }
        return -1;
    }
    public void flip(int[] A, int r){
        int l = 0;
        while(l < r){
            int temp = A[l];
            A[l] = A[r];
            A[r] = temp;
            l++;
            r--;
        }
    }
}

//Time Complexity : O(n ^ 2)
//Space Complexity : O(1)
