/*
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
*/

class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> list = new ArrayList<>();
        if(digits == null || digits.length() == 0){
            return list;
        }
        Map<Character, String> map = getMap();
        helper(digits, list, map, 0, new StringBuilder());
        return list;
    }
    public Map<Character, String> getMap(){
        Map<Character, String> map = new HashMap<>();
        map.put('2', "abc");
        map.put('3', "def");
        map.put('4', "ghi");
        map.put('5', "jkl");
        map.put('6', "mno");
        map.put('7', "pqrs");
        map.put('8', "tuv");
        map.put('9', "wxyz");
        return map;
    }
    public void helper(String digits, List<String> list, Map<Character, String> map, int index, StringBuilder sb){
        if(index == digits.length()){
            list.add(sb.toString());
            return;
        }
        String button = map.get(digits.charAt(index));
        for(char c : button.toCharArray()){
            sb.append(c);
            helper(digits, list, map, index + 1, sb);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
