/*
Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:
Input: [1, 2, 2, 3, 1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:
Input: [1,2,2,3,1,4,2]
Output: 6
*/

class Solution {
    public int findShortestSubArray(int[] nums) {
        Map<Integer, Integer> count = new HashMap<>();
        Map<Integer, Integer> left = new HashMap<>();
        Map<Integer, Integer> right = new HashMap<>();
        for(int i = 0; i < nums.length; i++){
            int n = nums[i];
            if(left.get(n) == null){
                left.put(n, i);
            }
            right.put(n, i);
            count.put(n, count.getOrDefault(n, 0) + 1);
        }
        int minLength = Integer.MAX_VALUE;
        int maxCount = Collections.max(count.values());
        for(int n : count.keySet()){
            if(count.get(n) == maxCount){
                minLength = Math.min(minLength, right.get(n) - left.get(n) + 1);
            }
        }
        return minLength;
    }
}
