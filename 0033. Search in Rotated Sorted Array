/*
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
*/

class Solution {
    public int search(int[] nums, int target) {
        if(nums == null || nums.length == 0){
            return -1;
        }
        if(nums.length == 1){
            return nums[0] == target ? 0 : -1;
        }
        int smallest_index = getSmallestIndex(nums);
        if(target == nums[smallest_index]){
            return smallest_index;
        }
        if(smallest_index == 0) {
            return search(nums, target, 0, nums.length - 1);
        } else if(target < nums[0]){
            return search(nums, target, smallest_index, nums.length - 1);
        } else {
            return search(nums, target, 0, smallest_index - 1);
        }
    }
    public int getSmallestIndex(int[] nums){
        int left = 1;
        int right = nums.length - 1;
        if(nums[left] < nums[right]){
            return 0;
        }
        while(left < right - 1){
            int mid = left + (right - left) / 2;
            if(nums[mid - 1] > nums[mid]){
                return mid - 1;
            } else if (nums[mid] < nums[0]) {
                right = mid;
            } else {
                left = mid;
            }
        }
        if(nums[left] > nums[right]){
            return left;
        } else {
            return left - 1;
        }
    }
    public int search(int[] nums, int target, int left, int right){
        while(left < right - 1){
            int mid = left + (right - left) / 2;
            if(nums[mid] == target){
                return mid;
            } else if (nums[mid] < target){
                left = mid;
            } else {
                right = mid;
            }
        }
        if(nums[right] == target){
            return right;
        } else {
            return nums[left] == target ? left : -1;
        }
    }
}
