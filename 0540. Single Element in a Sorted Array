/*
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

 

Example 1:

Input: [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: [3,3,7,7,10,11,11]
Output: 10
 

Note: Your solution should run in O(log n) time and O(1) space.
*/

//Solution 1 Binary Search
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int l = 0;
        int r = nums.length - 1;
        while(l < r - 1){
            int mid = l + (r - l) / 2;
            if(mid % 2 == 1){
                if(mid > 0 && nums[mid] == nums[mid - 1]){
                    l = mid;
                } else if (mid < nums.length && nums[mid] == nums[mid + 1]){
                    r = mid;
                } else {
                    return nums[mid];
                }
            } else {
                if(mid < nums.length && nums[mid] == nums[mid + 1]){
                    l = mid;
                } else if (mid > 0 && nums[mid] == nums[mid - 1]){
                    r = mid;
                } else {
                    return nums[mid];
                }
            }
        }
        if(l == 0 || nums[l] != nums[l - 1]){
            return nums[l];
        }
        return nums[r];
    }
}

//Solution 2 Binary Search on even indexes
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int l = 0;
        int r = nums.length - 1;
        while(l < r - 1){
            int mid = l + (r - l) / 2;
            if(mid % 2 == 1){
                mid--;
            }
            if(nums[mid] == nums[mid + 1]){
                l = mid + 2;
            } else {
                r = mid;
            }
        }
        if(l == 0 || nums[l] != nums[l - 1]){
            return nums[l];
        } else {
            return nums[r];
        }
    }
}
