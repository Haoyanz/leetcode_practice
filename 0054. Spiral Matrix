/*
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
*/

class Solution1 {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result = new ArrayList<>();
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return result;
        }
        int up = 0;
        int down = matrix.length - 1;
        int left = 0;
        int right = matrix[0].length - 1;
        while(up <= down && left <= right){
            for(int i = left; i <= right; i++){
                result.add(matrix[up][i]);
            }
            for(int i = up + 1; i <= down; i++){
                result.add(matrix[i][right]);
            }
            if(up < down && left < right){
                for(int i = right - 1; i >= left + 1; i--){
                    result.add(matrix[down][i]);
                }
                for(int i = down; i >= up + 1; i--){
                    result.add(matrix[i][left]);
                }
            }
            up++;
            down--;
            left++;
            right--;
        }
        return result;
    }
}

class Solution2 {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result = new ArrayList<>();
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return result;
        }
        int up = 0;
        int down = matrix.length - 1;
        int left = 0;
        int right = matrix[0].length - 1;
        while(up < down && left < right){
            for(int i = left; i <= right; i++){
                result.add(matrix[up][i]);
            }
            for(int i = up + 1; i <= down - 1; i++){
                result.add(matrix[i][right]);
            }
            for(int i = right; i >= left; i--){
                result.add(matrix[down][i]);
            }
            for(int i = down - 1; i >= up + 1; i--){
                result.add(matrix[i][left]);
            }
            up++;
            down--;
            left++;
            right--;
        }
        //up >= down || left >= right
        if(up > down || left > right){
            return result;
        } else if (up == down){
            for(int i = left; i <= right; i++){
                result.add(matrix[up][i]);
            }
        } else {
            for(int i = up; i <= down; i++){
                result.add(matrix[i][left]);
            }
        }
        return result;
    }
}

public class Solution {
  public List<Integer> spiral(int[][] matrix) {
    List<Integer> list = new ArrayList<>();
    if(matrix.length == 0 || matrix[0].length == 0){
      return list;
    }
    helper(matrix, list, 0, matrix.length - 1, 0, matrix[0].length - 1);
    return list;
  }
  private void helper(int[][] matrix, List<Integer> list, int up, int down, int left, int right){
    //base case
    if(up > down || left > right){
      return;
    }
    if(up == down){
      for(int i = left; i <= right; i++){
        list.add(matrix[up][i]);
      }
      return;
    }
    if(left == right){
      for(int i = up; i <= down; i++){
        list.add(matrix[i][left]);
      }
      return;
    }
    //recursive rule
    for(int i = left; i <= right; i++){
      list.add(matrix[up][i]);
    }
    for(int i = up + 1; i <= down - 1; i++){
      list.add(matrix[i][right]);
    }
    for(int i = right; i >= left; i--){
      list.add(matrix[down][i]);
    }
    for(int i = down - 1; i >= up + 1; i--){
      list.add(matrix[i][left]);
    }
    helper(matrix, list, up + 1, down - 1, left + 1, right - 1);
  }
}
//Time Complexity : O(m * n)
//Space Complexity : O(min(m, n))
