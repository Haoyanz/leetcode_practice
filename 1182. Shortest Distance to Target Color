/*
You are given an array colors, in which there are three colors: 1, 2 and 3.

You are also given some queries. Each query consists of two integers i and c, return the shortest distance between the given index i and the target color c. If there is no solution return -1.

 

Example 1:

Input: colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]
Output: [3,0,3]
Explanation: 
The nearest 3 from index 1 is at index 4 (3 steps away).
The nearest 2 from index 2 is at index 2 itself (0 steps away).
The nearest 1 from index 6 is at index 3 (3 steps away).
*/

class Solution {
    public List<Integer> shortestDistanceColor(int[] colors, int[][] queries) {
        int[][] distances = new int[3][colors.length];
        int color = colors[0];
        
        // initialize distances to -1;
        for(int i = 0; i < 3; i++)
            distances[i][0] = -1;
        distances[color-1][0] = 0;
        
        // traverse left to right. O(3N)
        for(int i = 1; i < colors.length; i++){
            color = colors[i];
            // iterate over all colors
            for(int c = 0; c < 3; c++){
                if(color == c + 1)
                    distances[c][i] = 0;
                else if(distances[c][i-1] == -1) // haven't seen this color on the left yet
                    distances[c][i] = -1;
                else 
                    distances[c][i] = distances[c][i-1] + 1;
            }
        }
        
        // traverse right to left, O(3N), starting from the second to the last elemnt
        for(int i = colors.length - 2; i >= 0; i--){
            color = colors[i];
            // iterate over all colors
            for(int c = 0; c < 3; c++){
                if(color == c + 1)
                    continue;
                else if(distances[c][i] == -1 && distances[c][i+1] == -1)
                    continue; // this color doesn't exist
                else if(distances[c][i] == -1)  // this color is on the right only 
                    distances[c][i] = distances[c][i+1] + 1;
                else
                    distances[c][i] = Math.min(distances[c][i+1] + 1, distances[c][i-1] + 1); // the i-1 is safe because when i == 0, this case can't be true
            }
        }
        
        List<Integer> ans = new ArrayList<>();
        int i = 0;
        for(int[] q: queries){
            ans.add(distances[q[1] - 1][q[0]]);
        }
        
        return ans;
    }
}
