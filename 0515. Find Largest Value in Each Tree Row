/*
You need to find the largest value in each row of a binary tree.

Example:
Input: 

          1
         / \
        3   2
       / \   \  
      5   3   9 

Output: [1, 3, 9]
*/

//Solution 1 BFS + queue 2ms
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if(root == null){
            return list;
        }
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            int max = Integer.MIN_VALUE;
            for(int i = 0; i < size; i++){
                TreeNode cur = queue.poll();
                max = Math.max(cur.val, max);
                if(cur.left != null){
                    queue.offer(cur.left);
                }
                if(cur.right != null){
                    queue.offer(cur.right);
                }
            }
            list.add(max);
        }
        return list;
    }
}

//Solution 2 DFS + recursion 1ms
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        helper(root, 0, list);
        return list;
    }
    public void helper(TreeNode root, int height, List<Integer> list){
        if(root == null){
            return;
        }
        if(list.size() <= height){
            list.add(height, root.val);
        } else {
            if(list.get(height) < root.val){
                list.set(height, root.val);
            }
        }
        helper(root.left, height + 1, list);
        helper(root.right, height + 1, list);
    }
}
