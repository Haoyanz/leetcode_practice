/*
Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Example 1:

Input: [3,2,1,5,6,4] and k = 2
Output: 5
Example 2:

Input: [3,2,3,1,2,4,5,5,6] and k = 4
Output: 4
*/

class Solution {
    public int findKthLargest(int[] nums, int k) {
        quickSort(nums, k, 0, nums.length - 1);
        return nums[k - 1];
    }
    public void quickSort(int[] nums, int k, int l, int r){
        if(l >= r){
            return;
        }
        int mid = partition(nums, l, r);
        if(mid == k - 1){
            return;
        } else if (mid < k - 1){
            quickSort(nums, k, mid + 1, r);
        } else {
            quickSort(nums, k, l, mid - 1);
        }
    }
    public int partition(int[] nums, int left, int right){
        int pivotIndex = left + (int)Math.random() * (right - left + 1);
        int pivot = nums[pivotIndex];
        swap(nums, right, pivotIndex);
        int l = left;
        int r = right - 1;
        while(l <= r){
            if(nums[l] > pivot){
                l++;
            } else {
                swap(nums, l, r);
                r--;
            }
        }
        swap(nums, l, right);
        return l;
    }
    public void swap(int[] nums, int l, int r){
        int temp = nums[l];
        nums[l] = nums[r];
        nums[r] = temp;
    }
}
