/*
Given a string s of '(' , ')' and lowercase English characters. 

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
 

Example 1:

Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.
*/

class Solution {
    public String minRemoveToMakeValid(String s) {
        char[] arr = s.toCharArray();
        int left = 0;
        int leftSeen = 0;
        int index = 0;
        for(int i = 0; i < arr.length; i++){
            if(arr[i] == '('){
                left++;
                leftSeen++;
            } else if(arr[i] == ')'){
                if(left == 0){
                    continue;
                }
                left--;
            }
            arr[index++] = arr[i];
        }
        int resultIndex = 0;
        int leftToKeep = leftSeen - left;
        for(int i = 0; i < index; i++){
            if(arr[i] == '('){
                leftToKeep--;
                if(leftToKeep < 0){
                    continue;
                }
            }
            arr[resultIndex++] = arr[i];
        }
        return new String(arr, 0, resultIndex);
    }
}
