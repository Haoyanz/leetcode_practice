/*
Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
*/

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        helper(list, 0, nums);
        return list;
    }
    public void helper(List<List<Integer>> list, int index, int[] nums){
        if(index == nums.length){
            list.add(toList(nums));
            return;
        }
        for(int i = index; i < nums.length; i++){
            swap(nums, i, index);
            helper(list, index + 1, nums);
            swap(nums, i, index);
        }
    }
    public void swap(int[] nums, int l, int r){
        int temp = nums[l];
        nums[l] = nums[r];
        nums[r] = temp;
    }
    public List<Integer> toList(int[] nums){
        List<Integer> list = new ArrayList<>();
        for(int i : nums){
            list.add(i);
        }
        return list;
    }
}

//Time Complexity O(n! * n)
//Space Complexity O(n)
