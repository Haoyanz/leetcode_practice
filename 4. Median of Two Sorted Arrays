/*
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
*/

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1.length > nums2.length){
            return findMedianSortedArrays(nums2, nums1);
        }
        int len1 = nums1.length;
        int len2 = nums2.length;
        int left = 0;
        int right = len1;
        while(left <= right){
            int partitionX = left + (right - left) / 2;
            int partitionY = (len1 + len2 + 1) / 2 - partitionX;
            int leftMax1 = partitionX == 0 ? Integer.MIN_VALUE : nums1[partitionX - 1];
            int leftMax2 = partitionY == 0 ? Integer.MIN_VALUE : nums2[partitionY - 1];
            int rightMin1 = partitionX == len1 ? Integer.MAX_VALUE : nums1[partitionX];
            int rightMin2 = partitionY == len2 ? Integer.MAX_VALUE : nums2[partitionY];
            if(leftMax1 <= rightMin2 && leftMax2 <= rightMin1){
                if((len1 + len2) % 2 == 0){
                    return (Math.max(leftMax1, leftMax2) + Math.min(rightMin1, rightMin2)) / 2.0;
                } else {
                    return Math.max(leftMax1, leftMax2);
                }
            } else if(leftMax1 > rightMin2){
                right = partitionX - 1;
            } else {
                left = partitionX + 1;
            }
        }
        return -1;
    }
}
