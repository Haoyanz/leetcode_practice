/*
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6
*/

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length == 0){
            return null;
        }
        PriorityQueue<ListNode> minHeap = new PriorityQueue<>(new Comparator<ListNode> () {
            @Override
            public int compare(ListNode n1, ListNode n2){
                return n1.val <= n2.val ? -1 : 1;
            }
        });
        for(ListNode node : lists){
            if(node != null){
                minHeap.offer(node);
            }
        }
        ListNode dummy = new ListNode(0);
        ListNode cur = dummy;
        while(!minHeap.isEmpty()){
            cur.next = minHeap.poll();
            if(cur.next.next != null){
                minHeap.offer(cur.next.next);
                cur.next.next = null;
            }
            cur = cur.next;
        }
        return dummy.next;
    }
}
