/*
You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.

Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.

Input: head = [1,2,null,3]
Output: [1,3,2]
Explanation:

The input multilevel linked list is as follows:

  1---2---NULL
  |
  3---NULL
*/

class Solution {
    public Node flatten(Node head) {
        if(head == null){
            return head;
        }
        Node dummy = new Node(0, null, head, null);
        DFS_helper(dummy, head);
        head.prev = null;
        return dummy.next;
    }
    public Node DFS_helper(Node prev, Node cur){
        if(cur == null){
            return prev;
        }
        prev.next = cur;
        cur.prev = prev;
        Node next = cur.next;
        Node tail = DFS_helper(cur, cur.child);
        cur.child = null;
        return DFS_helper(tail, next);
    }
}
