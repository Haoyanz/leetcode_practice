/*
Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
*/

class Solution {
    public int[][] merge(int[][] intervals) {
        Collections.sort(Arrays.asList(intervals), new Comparator<int[]> () {
            @Override
            public int compare(int[] a, int[] b){
                if(a[0] == b[0]){
                    return 0;
                }
                return a[0] < b[0] ? -1 : 1;
            }
        });
        List<int[]> list = new ArrayList<>();
        for(int[] interval : intervals){
            if(list.isEmpty() || list.get(list.size() - 1)[1] < interval[0]){
                list.add(interval);
            } else {
                list.get(list.size() - 1)[1] = Math.max(list.get(list.size() - 1)[1], interval[1]);
            }
        }
        return list.toArray(new int[list.size()][]);
    }
}
